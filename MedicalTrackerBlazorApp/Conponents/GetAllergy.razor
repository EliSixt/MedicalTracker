<h3>GetAllergy</h3>
<div style="margin: 5px">
    Name of the Allergy
    <br />
    <input type="text" @bind="Allergy.AlgyName" placeholder="Allergy Name" />@*AlgyName*@
</div>
<div style="margin: 5px">
    <p style="font-size:small">Description of Allergy Reactions:</p>
    <input type="text" @bind="Allergy.CommonReactions" placeholder="List all of the Allergy Reactions" />@*BriefDescriptionOfReactions, make this into a little list with a submit button as well. Look into validation*@
</div>
<div style="margin: 5px">
    <input type="checkbox" @bind="Allergy.IslifeThreatening" /> Life Threatening @*IsLifeThreatening*@
</div>


@*If IsLifeThreatening, it will show text boxes to input symptom and and that symptom description with a submit button binded to a method.
    The method will check for duplicates then submit those text inputs into a list of SymptomsLeadingToLifeThreatening.
    Then add/update that list into the current patient's Allergy.SymptomsLeadingToLifeThreatening.
*@
@if (Allergy.IslifeThreatening)
{
    <p style="font-size:small">Add Symptoms leading to life threatening:</p>
    <div style="margin: 5px">
        <input type="text" @bind="Symptom.SymptomName" placeholder="Symptom Name" />@*SymptomsLeadingToLifeThreatening*@
    </div>
    <div style="margin: 5px">
        <input type="text" @bind="Symptom.SymptomDescription" placeholder="Symptom Description" />
    </div>
    <button type="submit" @onclick="AddSymptom">Add Symptom</button>
    <br />

    @foreach (Symptom item in Symptoms) @*Temp: to see list behavior*@
    {
        <li>
            @item
        </li>
    }
}
<div style="margin: 5px">
    <input type="checkbox" @bind="Allergy.IngestionOnly" />@*Ingestion only?*@
    Ingestion Only
</div>
<div style="margin: 5px">
    <input type="checkbox" @bind="Allergy.ConfirmedTestedAlgyType"> Allergy Tested @*ConfirmedTestedAlgyType*@
</div>
<div style="margin: 5px">
    <input type="checkbox" @bind="Allergy.EpiPenRequired" /> EpiPen Required @*EpiPenRequired*@
</div>
<div style="margin: 5px">
    <input type="checkbox" @bind="Allergy.CPRRequired" /> CPR Required @*CPRRequired*@
</div>
<div style="margin: 5px">
    <input type="checkbox" @bind="Allergy.Call911" /> Call 911 @*Call911*@
</div>


@*IF medicine is required pop-up GetMedicine with the List in case of multiple medicines*@
<div style="margin: 5px">
    <input type="checkbox" @bind="Allergy.TreatmentRequired" /> Medicine Required  @*TreatmentRequired*@
</div>
@*If TreatmentRequired, it will show GetMedicine Component along with a submit button binded to a method.
    The method will check for duplicates through the medicine names then submit the input into a list of Medicine (AlgyTreatmentMedication) used for or against the Allergy.
    Then add/update that list into the current patient's Allergy.AlgyTreatmentMedication.
*@
@if (Allergy.TreatmentRequired)
{
    <GetMedicine @bind-Medicine="AlgyMed" />
    <br />
    <button type="submit" @onclick="AddMed">Add</button>
    @foreach (Medicine item in AlgyMedicines) @*this is temporary, to see list behavior*@
    {
        <li>@item</li>
    }
}
<br />
<br />

<button type="submit" @onclick="OnSubmitAllergy">Submit Allergy</button>

@foreach (Allergy item in Data.CurrentPatient.Allergies)
{
    <li>@item</li>
}

@code {
    [Parameter]
    public Allergy Allergy { get; set; } = new();
    [Parameter]
    public EventCallback<Allergy> AllergyChanged { get; set; }

    public Medicine AlgyMed = new();
    //private List<Medicine> _algyMeds = new();
    public List<Medicine> AlgyMedicines //Add this to Allergy object and then to service with the submit button.
    {
        get => Allergy.AlgyTreatmentMedication;
        set => Allergy.AlgyTreatmentMedication = value;
    }

    [Parameter]
    public Symptom Symptom { get; set; } = new();
    [Parameter]
    public EventCallback<Symptom> SymptomChanged { get; set; }
    //private List<Symptom> _symptoms {  get; set; } = new();
    public List<Symptom> Symptoms //Add this to Allergy object with a submit button
    {
        get => Allergy.SymptomsLeadingToLifeThreatening;
        set => Allergy.SymptomsLeadingToLifeThreatening = value;
    }

    //add a button method, adding each of the inputs onto a list (kinda like AddMeds()),
    // then bind it to Allergy.SymptomsLeadingToLifeThreatening and service here
    //add an editForm with a submit button and validation error messages in the class' properties

    /// <summary>
    /// Creates a copy of symptom.
    /// Prevents duplicate answers from being added onto the Symptoms list.
    /// If it passes it gets added onto Symptoms list.
    /// Deletes the contents of the symptom.
    /// </summary>
    public void AddSymptom()
    {
        Symptom copySymptom = new(Symptom);

        if (!Data.HasDuplicate(Symptoms, copySymptom))
        {
            Symptoms.Add(copySymptom);
            Symptom = new();
        }
    }
    /// <summary>
    /// Creates a copy of AlgyMed.
    /// Prevents duplicate answers from being added onto a medicine list.
    /// If it passes it gets added onto AlgyMedicines.
    /// Deletes the contents of AlgyMed.
    /// </summary>
    public void AddMed()
    {
        Medicine copyMed = new(AlgyMed);

        if (!Data.HasDuplicate(AlgyMedicines, copyMed))
        {
            AlgyMedicines.Add(copyMed);
            AlgyMed = new();
        }
    }

    @*add a submit button at the end to add this Allergy into the List<Allergy> within Patient under a service*@

    /// <summary>
    /// Adds Allergy variable into the list<allergy> of the CurrentPatient from the DataService.
    /// Checks for any duplicates in the list<allergy> of the dataservice by comparing allergy names.
    /// Ignores case.
    /// </summary>
    public void OnSubmitAllergy()
    {
        Allergy CopyAllergy = new(Allergy);

        Patient copyCurrentPatient = new(Data.GetCurrentPatient());

        if (!Data.HasDuplicate(copyCurrentPatient.Allergies, CopyAllergy))
        {
            copyCurrentPatient.Allergies.Add(CopyAllergy); //make this have that extra wall of C&B

            if (Data.HasDifferenceOfAValue(Data.GetCurrentPatient().Allergies, copyCurrentPatient.Allergies, CopyAllergy))
            {
                //TODO: Add to currentPatient with a new method cause currentPatient will be private.
            }
            Allergy = new();
        }
    }
}