<h3>AutoComplete</h3>

<input type="text" @oninput="(e => OnInput(e))" value="@SelectedWord" /> @*TODO: What if the user deletes what they wrote, then it wouldnt be onInput, it would make sense to have "onChange", but it only gets called whenever it's out of focus*@


@foreach (var item in autoCompleteSuggestions)
{

    <br />
    <button @onclick="@(() => AutoCompleteReturnValue(@item))">@item</button>
}
<h1>@SelectedWord</h1> @*Temp: Delete*@



@code {

    private List<string>? _words;
    [Parameter]
    public List<string>? WordList
    {
        get { return _words; }
        set { _words = value; }
    }

    private string? _selectedWord;
    [Parameter]
    public string? SelectedWord
    {
        get { return _selectedWord; }
        set { _selectedWord = value; }
    }

    [Parameter]
    public EventCallback<string> SelectedWordChanged { get; set; }
    //string UserInput = "";
    List<string> autoCompleteSuggestions = new();

    //question:xml definition with the "///" isnt working, tried changing the settings tool>options>textEditor>C#>advanced>commments>Generate XML comments
    private void OnInput(ChangeEventArgs args)
    {
        var inputText = args.Value as string;
        if (inputText != null && WordList != null)
        {
            FilteredListGenerator(WordList, inputText);
        }
    }


    public void FilteredListGenerator(List<string> stringList, string input)
    {
        autoCompleteSuggestions.Clear();
        string LastWord = input.Split(' ').Last();
        List<string> list = new();
        list = stringList.Where(x => x.ToLower().StartsWith(LastWord.ToLower())).Take(8).ToList();

        if (LastWord.Length > 0)
        {
            foreach (var item in list)
            {
                autoCompleteSuggestions.Add(item);
            }
        }
    }

    async Task AutoCompleteReturnValue(string value/*, ChangeEventArgs args*/)
    {
        if (string.IsNullOrEmpty(SelectedWord))
        {
            SelectedWord = value;
            //args.Value = SelectedWord;
            //UserInput = SelectedWord;
            await SelectedWordChanged.InvokeAsync(value);
        }
        else
        {
            SelectedWord += ' ' + value;
            //args.Value = SelectedWord;
            //UserInput = SelectedWord;
            await SelectedWordChanged.InvokeAsync(value);
        }
    }
}
