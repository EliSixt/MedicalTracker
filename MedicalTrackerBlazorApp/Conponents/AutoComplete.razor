<input type="text" @oninput="e => OnInput(e)" @bind-value="@UserSelection" />

@foreach (var item in autoCompleteSuggestions)
{

    <br />
    <button @onclick="@(() => AutoCompleteReturnValue(@item))">@item</button>
}


@code {

    private List<string>? _words;
    [Parameter]
    public List<string>? WordList
    {
        get { return _words; }
        set { _words = value; }
    }

    private string? _userSelection;

    public string? UserSelection
    {
        get { return _userSelection; }
        set { _userSelection = value; }
    }


    private string? _selectedSentence;
    [Parameter]
    public string? SelectedSentence
    {
        get { return _selectedSentence; }
        set { _selectedSentence = value; }
    }

    [Parameter]
    public EventCallback<string> SelectedWordChanged { get; set; }
    List<string> autoCompleteSuggestions = new();


    private void OnInput(ChangeEventArgs args)
    {
        var inputText = args.Value as string;
        UserSelection = new(inputText); //This fixed it!!!
        SelectedSentence = new(inputText); //This fixed it!!!

        if (inputText != null && WordList != null)
        {
            FilteredListGenerator(WordList, inputText);
        }
    }


    /// <summary>
    /// Creates an eight word suggestion's list, from a given dataset string list, depending on the beginning instance of the last string of the UserInput.
    /// </summary>
    /// <param name="stringList">List of strings, to base suggestions off of.</param>
    /// <param name="userInput">The string of the user's input.</param>
    public void FilteredListGenerator(List<string> stringList, string userInput)
    {
        if (userInput == null || stringList == null)
        {
            return;
        }

        string lastWord = userInput.Split(' ').Last();
        string stringMinusLastWord = "";
        if (userInput.LastIndexOf(" ") > 0)
        {
            stringMinusLastWord = userInput.Substring(0, userInput.LastIndexOf(" "));
        }
        List<string> filteredList = new();
        filteredList = stringList.Where(x => x.ToLower().StartsWith(lastWord.ToLower())).Take(8).ToList();
        autoCompleteSuggestions.Clear();

        if (lastWord.Length > 0)
        {
            foreach (var item in filteredList)
            {
                autoCompleteSuggestions.Add(string.Join(" ", stringMinusLastWord, item));
            }
        }
    }


    /// <summary>
    /// Used in the user interface, when called with a value inside, it assigns that value to a SelectedSentence and UserSelection then gets saved.
    /// </summary>
    /// <param name="value">Value that gets assigned to SelectedSentence.</param>
    void AutoCompleteReturnValue(string value/*, ChangeEventArgs args*/)
    {
        SelectedSentence = new(value); //whenever the user presses on an autocomplete suggestion "this" gets updated
        UserSelection = new(value); //whenever the user presses on an autocomplete suggestion "this" gets updated
        SelectedWordChanged.InvokeAsync(value);
    }
}
